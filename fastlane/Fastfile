default_platform(:ios)

platform :ios do
  desc 'Export ipa'
  lane :export_ipa do |options|
    decode_file

    keychain_password = SecureRandom.uuid

    create_keychain(
      name: 'ios-build.keychain',
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )

    # Import main app certificates
    import_certificate(
      certificate_path: ENV['P12_PATH'] || 'ios-build.p12',
      certificate_password: ENV['CERTIFICATE_PASSWORD'],
      keychain_name: 'ios-build.keychain',
      keychain_password: keychain_password,
      log_output: true
    )

    # Import app extension certificates
    import_certificate(
      certificate_path: ENV['EXTENSION_P12_PATH'] || 'extension-ios-build.p12',
      certificate_password: ENV['EXTENSION_CERTIFICATE_PASSWORD'],
      keychain_name: 'ios-build.keychain',
      keychain_password: keychain_password,
      log_output: true
    )

    # Install main app provisioning profiles
    @profiles.each { |profile| install_provisioning_profile(path: profile) }

    # Install app extension provisioning profiles
    @extension_profiles.each { |profile| install_provisioning_profile(path: profile) }

    update_targets = nil
    if !ENV['UPDATE_TARGETS'].empty?
      update_targets = ENV['UPDATE_TARGETS'].split(/\R/)
    elsif !ENV['DISABLE_TARGETS'].empty?
      update_targets = ENV['DISABLE_TARGETS'].split(/,/)
    end

    update_code_signing_settings(
      use_automatic_signing: false,
      path: ENV['PROJECT_PATH'],
      code_sign_identity: ENV['CODE_SIGNING_IDENTITY'],
      targets: update_targets,
      entitlements_file_path: ENV['ENTITLEMENTS_FILE_PATH']
    )

    # Other actions and commands for exporting the IPA...
  end
end

def decode_file
  @is_split_cer =
    (!ENV['P12_KEY_BASE64'].empty? && !ENV['P12_CER_BASE64'].empty?) ||
      (!ENV['P12_KEY_PATH'].empty? && !ENV['P12_CER_PATH'].empty?)
  if ENV['P12_PATH'].empty? &&
       (ENV['P12_KEY_PATH'].empty? || ENV['P12_CER_PATH'].empty?)
    if @is_split_cer
      File.write(
        '../ios-build-key.p12',
        Base64.decode64(ENV['P12_KEY_BASE64'])
      )
      File.write(
        '../ios-build-key.cer',
        Base64.decode64(ENV['P12_CER_BASE64'])
      )
    else
      File.write('../ios-build.p12', Base64.decode64(ENV['P12_BASE64']))
    end
  end

  @profiles = []
  if ENV['MOBILEPROVISION_PATH'].empty?
    ENV['MOBILEPROVISION_BASE64'].split(/\R/).each.with_index(1) do |profile, index|
      filename = "ios-build-#{index}.mobileprovision"
      puts "creating ../#{filename}"
      File.write("../#{filename}", Base64.decode64(profile))
      @profiles.push(filename)
    end
  else
    ENV['MOBILEPROVISION_PATH'].split(/\R/).each.with_index(1) do |profile, index|
      @profiles.push(profile)
    end
  end
end

def decode_file
  @is_split_cer =
    (!ENV['EXTENSION_P12_KEY_BASE64'].empty? && !ENV['EXTENSION_P12_CER_BASE64'].empty?) ||
      (!ENV['EXTENSION_P12_KEY_PATH'].empty? && !ENV['EXTENSION_P12_CER_PATH'].empty?)
  if ENV['EXTENSION_P12_PATH'].empty? &&
       (ENV['EXTENSION_P12_KEY_PATH'].empty? || ENV['EXTENSION_P12_CER_PATH'].empty?)
    if @is_split_cer
      File.write(
        '../ios-build-key.p12',
        Base64.decode64(ENV['EXTENSION_P12_KEY_BASE64'])
      )
      File.write(
        '../ios-build-key.cer',
        Base64.decode64(ENV['EXTENSION_P12_CER_BASE64'])
      )
    else
      File.write('../extension-ios-build.p12', Base64.decode64(ENV['EXTENSION_P12_BASE64']))
    end
  end

  @profiles = []
  if ENV['EXTENSION_MOBILEPROVISION_PATH'].empty?
    ENV['EXTENSION_MOBILEPROVISION_BASE64'].split(/\R/).each.with_index(1) do |profile, index|
      filename = "extension-ios-build-#{index}.mobileprovision"
      puts "creating ../#{filename}"
      File.write("../#{filename}", Base64.decode64(profile))
      @profiles.push(filename)
    end
  else
    ENV['EXTENSION_MOBILEPROVISION_PATH'].split(/\R/).each.with_index(1) do |profile, index|
      @profiles.push(profile)
    end
  end
end
